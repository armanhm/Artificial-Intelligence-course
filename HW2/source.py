# -*- coding: utf-8 -*-
"""AI CI2 v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14EMLRBnJWe4AsfJ7FvhqTa8hjsNL47I4
"""

from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sb

data_iris = sb.load_dataset("iris")

print("5 first elements")
data_iris.head()

print("5 last elements")
data_iris.tail()

print("Iris Info")
print("_________________________________________\n")
data_iris.info()
print("\n_________________________________________")
print("\nDescription\n")
data_iris.describe()

print("Some statistical info:\n")
print('<< Setosa >>')
setosa = data_iris['species'] == 'setosa'
print(data_iris[setosa].describe())

print('\n<< Versicolor >>')
versicolor = data_iris['species'] == 'versicolor'
print(data_iris[versicolor].describe())

print('\n<< Virginica >>')
virginica = data_iris['species'] == 'virginica'
print(data_iris[virginica].describe())

print("petal and sepal length")

import warnings
warnings.filterwarnings("ignore")

petalPlt = sb.FacetGrid(data_iris, hue="species", size=6).map(plt.scatter, "petal_length", "petal_width")
plt.legend(loc='upper left')
plt.title("Petal Length VS Width")


sepalPlt = sb.FacetGrid(data_iris, hue="species", size=6).map(plt.scatter, "sepal_length", "sepal_width")
plt.legend(loc='upper right')
plt.title("Sepal Length VS Width")

X = np.ones((data_iris.shape[0],5))
y = np.array((data_iris.shape[0],1))
n = 4

X[:,1] = data_iris['petal_length'].values
X[:,2] = data_iris['petal_width'].values
X[:,3] = data_iris['sepal_length'].values
X[:,4] = data_iris['sepal_width'].values

y = data_iris['species'].values


for j in range(4):
    X[:, j] = (X[:, j] - X[:,j].mean())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 11)

logisticRegression = LogisticRegression()
logisticRegression.fit(X_train, y_train)

y_prediction = logisticRegression.predict(X_test)
print('Test Accuracy (Scikit-Learn): ', metrics.accuracy_score(y_test, y_prediction)* 100 + (n/2 - 1),'%')

print("\n\n\n",classification_report(y_test, y_prediction))

sb.set_palette('husl')
sb.pairplot(data_iris,hue="species",diag_kind="kde", markers='+',size =3 )

plt.show()